import { Injectable, Inject, Logger } from '@nestjs/common';
import { RedisService } from './modules/redis/redis.service';
import { nanoid } from 'nanoid';

@Injectable()
export class AppService {
  constructor(private readonly _cacheManager: RedisService) { };

  async getKeyRedis(key: string) {
    try {
      let val = await this._cacheManager.get(key);
      console.log(`Gia tri key(${key}) la `, val);

      return val;

    } catch (error) {
      console.log("Loi nang~!!!!!!!!!!!!", error)
    }
  }

  /**
   * Save the public key client send. Then the server responds back UID.
   * @param {string} public_key 
   * @param
   * @returns UID generated by server
   */
  async savePublicKey(public_key: string) {
    try {
      const cat_id = await this.generateId();
      await this._cacheManager.set(cat_id, public_key);
      return cat_id;
    } catch (error) {
      console.log("savePublicKey Error:: ", error)
    }
  }

  async setNameCat() {
    type Cat = { name: string, id: string };
    // this._cacheManager.set(UID, cat);
  }

  private async generateId() {
    // const { nanoid } = await import('nanoid'); //dynamic import
    // //because it was an error when transpile to JS. ERR_REQUIRE_ESM

    let cat_id: string;
    let valCheck: unknown;
    do {
      cat_id = nanoid(10);
      valCheck = await this._cacheManager.get(cat_id);
      //generate again if UID duplicate.
    } while (valCheck != undefined);
    return cat_id;
  }

  async isExpired(cat_id: string) {
    const val = await this._cacheManager.get(cat_id);
    if (val) {
      return false;
    }
    return true;
  }
}
